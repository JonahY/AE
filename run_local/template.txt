# ======================================================== PAC =========================================================
# ---------------------------------------- Save waveform and ssq_cwt in batches ----------------------------------------
for idx, i in tqdm(enumerate(TRAI[valid_pac][cls_pac[0]], 1)):
    tmp = data_tra_1[int(i - 1)]
    if i != tmp[-1]:
        print('Error: TRAI is incorrect!')
        continue
    sig = tmp[-2]
    time = np.linspace(0, tmp[2] * (tmp[-3] - 1) * pow(10, 6), tmp[-3])
    for tmp_tail, s in enumerate(sig[::-1]):
        if s != 0:
            tail = -tmp_tail if tmp_tail > 0 else None
            break
    time, sig = time[:tail], sig[:tail]

    fig = plt.figure(figsize=(9.2, 3), num='0')
    ax = fig.add_subplot(1, 2, 1)
    ax.plot(time, sig, lw=1, color=color_1)
    plt.axhline(abs(pow(10, opt.threshold_dB / 20)), 0, sig.shape[0], linewidth=1, color="black")
    plt.axhline(-abs(pow(10, opt.threshold_dB / 20)), 0, sig.shape[0], linewidth=1, color="black")
    plot_norm(ax, 'Time (μs)', 'Amplitude (μV)', title='TRAI:%d' % i, legend=False, grid=True)
    ax = fig.add_subplot(1, 2, 2)
    Twxo, Wxo, ssq_freqs, *_ = ssq_cwt(sig, wavelet='morlet', scales='log-piecewise', fs=tmp[3], t=time)
    plt.contourf(time, ssq_freqs * 1000, pow(abs(Twxo), 0.5), cmap='cubehelix_r')
    plot_norm(ax, r'Time (μs)', r'Frequency (kHz)', y_lim=[min(ssq_freqs * 1000), 1000], legend=False)
    plt.savefig(r'H:\PAC\Pure Ni-tension test--0.01-2-AE Vallen&PAC-20211115\pop1\TRAI-%d.jpg' % i, pad_inches=0)
    fig.clear()


# ===================================================== Streaming ======================================================
# ---------------------------------------- Save waveform and ssq_cwt in batches ----------------------------------------
waveFold = '/home/Yuanbincheng/data/stream/waveforms_550'
saveFold = '/home/Yuanbincheng/data/stream/Wave&SSWT_550'
if not os.path.exists(saveFold):
    os.mkdir(saveFold)
saveFiles = os.listdir(saveFold)

for file in tqdm(os.listdir(waveFold)):
    if f'{file[43:-4]}.png' in saveFiles:
        continue
    try:
        with open(os.path.join(waveFold, file)) as f:
            data = np.array([i.strip().split(',') for i in f.readlines()[4:]]).astype(float)
    except ValueError:
        continue

    sig = data[:, 1]
    time = data[:, 0] - data[0, 0]
    fs = int(1e6 / time[1])

    fig = plt.figure(figsize=(9.2, 3), num='0')
    ax = fig.add_subplot(1, 2, 1)
    ax.plot(time, sig, lw=1, color=[255 / 255, 0 / 255, 102 / 255])
    plot_norm(ax, 'Time (μs)', 'Amplitude (μV)', title=file[43:-4], legend=False, grid=True)
    ax = fig.add_subplot(1, 2, 2)
    Twxo, Wxo, ssq_freqs, *_ = ssq_cwt(sig, wavelet='morlet', scales='log-piecewise', fs=fs, t=time)
    plt.contourf(time, ssq_freqs * 1000, pow(abs(Twxo), 0.5), cmap='cubehelix_r')
    plot_norm(ax, r'Time (μs)', r'Frequency (kHz)', y_lim=[min(ssq_freqs * 1000), 1000], legend=False)
    plt.savefig(os.path.join(saveFold, file[43:-4]), pad_inches=0)
    fig.clear()

# ------------------------------------------ Calculation of waveform features ------------------------------------------
waveFold = r'F:\PAC\Pure Ni-tension test--0.01-2-AE Vallen&PAC-20211115\stream\thershold cutting\alpha_1.3\ITU_650\waveforms_650'
features_path = r'F:\PAC\Pure Ni-tension test--0.01-2-AE Vallen&PAC-20211115\stream\thershold cutting\alpha_1.3\ITU_650\.txt'
Time_Waveform, Amp_Waveform, Dur_Waveform, Eny_Waveform = np.array([]), np.array([]), np.array([]), np.array([])

for file in tqdm(os.listdir(waveFold)):
    if file == 'log':
        continue
    with open(os.path.join(waveFold, file)) as f:
        f.readline()
        triggerTime = float(f.readline().strip())
        data = np.array([i.strip().split(',') for i in f.readlines()[2:]]).astype(float)

    sig = data[:, 1]
    time = data[:, 0]
    fs = int(1e6 / (time[1] - time[0]))

    Time_Waveform = np.append(Time_Waveform, triggerTime + time[0] / 1e6)
    Amp_Waveform = np.append(Amp_Waveform, max(abs(sig)))
    Dur_Waveform = np.append(Dur_Waveform, time[-1] - time[0])
    Eny_Waveform = np.append(Eny_Waveform, np.sum(np.multiply(pow(sig, 2), pow(10, 6) / fs)) / pow(10, 4))

valid_sort = np.argsort(Time_Waveform)
Time_Waveform = Time_Waveform[valid_sort]
Amp_Waveform = Amp_Waveform[valid_sort]
Dur_Waveform = Dur_Waveform[valid_sort]
Eny_Waveform = Eny_Waveform[valid_sort]

xlabelz = ['Amplitude (μV)', 'Duration (μs)', 'Energy (aJ)']
color_1 = [255 / 255, 0 / 255, 102 / 255]  # red
color_2 = [0 / 255, 136 / 255, 204 / 255]  # blue
features = Features(color_1, color_2, Time_Waveform, '')
features.cal_WaitingTime(Time_Waveform, Time_Waveform, Time_Waveform, Dur_Waveform, Dur_Waveform, Dur_Waveform, r'$\mathbf{\Delta}$t (s)', r'P($\mathbf{\Delta}$t)', [8, 8, 8], bin_method='log', select=[0, 1], FIT=True, features_path=features_path)
features.cal_PDF(sorted(Eny_Waveform), sorted(Eny_Waveform), sorted(Eny_Waveform), xlabelz[2], 'PDF (%s)' % xlabelz[2][0], features_path, [[3, None], [2, -2], [2, -4]], [8, 8, 8], bin_method='log', select=[0, 1], FIT=True)
features.cal_PDF(sorted(Dur_Waveform), sorted(Dur_Waveform), sorted(Dur_Waveform), xlabelz[1], 'PDF (%s)' % xlabelz[1][0], features_path, [[3, None], [2, -2], [2, -4]], [8, 8, 8], bin_method='log', select=[0, 1], FIT=True)

idx_1, idx_2, _ = linear_matching(Amp_Waveform, Eny_Waveform, xlabelz[0], xlabelz[2], [2], [-3])

df_pop1 = pd.DataFrame({'Time_pop1': Time_Waveform[idx_1], 'Amp_pop1': Amp_Waveform[idx_1], 'Eny_pop1': Eny_Waveform[idx_1], 'Dur_pop1': Dur_Waveform[idx_1]})
df_pop2 = pd.DataFrame({'Time_pop2': Time_Waveform[idx_2], 'Amp_pop2': Amp_Waveform[idx_2], 'Eny_pop2': Eny_Waveform[idx_2], 'Dur_pop2': Dur_Waveform[idx_2]})
df_pop1.to_csv(os.path.join(features_path[:-5], 'ITU550_EAD-T_pop1.csv'), index=None)
df_pop2.to_csv(os.path.join(features_path[:-5], 'ITU550_EAD-T_pop2.csv'), index=None)

features.cal_ML(sorted(Eny_Waveform), sorted(Eny_Waveform[idx_1]), sorted(Eny_Waveform[idx_2]), xlabelz[2], 'ML (%s)' % xlabelz[2][0], features_path, select=[0, 3])
features.cal_OmoriLaw_timeSeq(Eny_Waveform, idx_1, idx_2, INTERVAL_NUM=[8, 8], bin_method='log', FIT=True, features_path=features_path)
features.cal_OmoriLaw(Eny_Waveform, Eny_Waveform[idx_1], Eny_Waveform[idx_2], r'$\mathbf{t-t_{MS}\;(s)}$', r'$\mathbf{r_{AS}(t-t_{MS})\;(s^{-1})}$', [8, 8, 8], bin_method='log', select=[1, None], FIT=True, features_path=features_path)

# ------------------------------------------ Plot average frequency in batches -----------------------------------------
waveFold = r'F:\PAC\Pure Ni-tension test--0.01-2-AE Vallen&PAC-20211115\stream\thershold cutting\alpha_1.3\ITU_4000\waveforms_4000'
Res = np.array([0 for _ in range(250)]).astype('float64')
num = 0
grid = np.linspace(0, pow(10, 6), 250)

for file in tqdm(np.array(os.listdir(waveFold))[1:][valid_sort][idx_2]):
    with open(os.path.join(waveFold, file)) as f:
        f.readline()
        triggerTime = float(f.readline().strip())
        data = np.array([i.strip().split(',') for i in f.readlines()[2:]]).astype(float)

    sig = data[:, 1]
    time = data[:, 0]
    fs = int(1e6 / (time[1] - time[0]))

    N = sig.shape[0]
    fft_y = fft(sig)
    abs_y = np.abs(fft_y)
    normalization = abs_y / N
    normalization_half = normalization[range(int(N / 2))]
    frq = (np.arange(N) / N) * fs
    half_frq = frq[range(int(N / 2))]

    valid_idx = int((pow(10, 6) / max(half_frq)) * half_frq.shape[0])
    tmp = [0 for _ in range(250)]
    i = 1
    for j, k in zip(half_frq[:valid_idx], normalization_half[:valid_idx]):
        while True:
            if grid[i - 1] <= j < grid[i]:
                tmp[i - 1] += k
                break
            i += 1
    Res += np.array(tmp)
    num += 1

fig = plt.figure(figsize=(6, 4.1))
ax = fig.add_subplot()
ax.plot(grid / 1000, Res / max(Res), lw=1, color=color_1)
plot_norm(ax, x_lim=[0, 800], xlabel='Frequency (kHz)', ylabel='Normalized Amplitude', title='Average Frequency')


# ======================================================= VALLEN =======================================================
# ------------------------------------------------- Image normalization ------------------------------------------------
for idx, file in tqdm(enumerate(files, 1)):
    img = cv2.imread(os.path.join(files_dir, file))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = np.array(img)
    img_norm = (img - mean_255) / std_255

    fig = plt.figure(figsize=(2.56, 2.56), num='0')
    plt.imshow(img_norm)
    plt.axis('off')
    plt.gca().xaxis.set_major_locator(plt.NullLocator())
    plt.gca().yaxis.set_major_locator(plt.NullLocator())
    plt.subplots_adjust(top=1, bottom=0, right=1, left=0, hspace=0, wspace=0)
    plt.margins(0, 0)
    plt.savefig(os.path.join('./train dataset_wsst_norm', '%i.jpg' % idx), pad_inches=0)
    fig.clear()

# ---------------------------------------- Feature calculation after filtering -----------------------------------------
# Feature calculation after filtering
TRAI_bandstop, Time_bandstop, Amp_bandstop, RiseT_bandstop, Dur_bandstop, Eny_bandstop, Counts_bandstop = np.array([]), np.array([]), np.array([]), np.array([]), np.array([]), np.array([]), np.array([])
for idx, i in tqdm(enumerate(TRAI[sorted(pop2_2)], 1)):
    tmp = data_tra[int(i - 1)]
    if i != tmp[-1]:
        print('Error: TRAI is incorrect!')
        continue
    try:
        tmp_T, tmp_A, tmp_RT, tmp_D, tmp_E, tmp_Cnts, _ = validation(data_tra, i, True, 'bandstop')
        TRAI_Waveform = np.append(TRAI_Waveform, tmp[-1])
        Time_Waveform = np.append(Time_Waveform, tmp_T)
        Amp_Waveform = np.append(Amp_Waveform, tmp_A)
        RiseT_Waveform = np.append(RiseT_Waveform, tmp_RT)
        Dur_Waveform = np.append(Dur_Waveform, tmp_D)
        Eny_Waveform = np.append(Eny_Waveform, tmp_E)
        Counts_Waveform = np.append(Counts_Waveform, tmp_Cnts)
    except TypeError:
        continue

# ---------------------------------- Save waveform and ssq_cwt in batches (Filtering) ----------------------------------
for idx, i in tqdm(enumerate(TRAI[pop2_2], 1)):
    tmp = data_tra[int(i - 1)]
    if i != tmp[-1]:
        print('Error: TRAI is incorrect!')
        continue
    sig = np.multiply(array.array('h', bytes(tmp[-2])), tmp[-3] * 1000)
    time = np.linspace(0, pow(tmp[-5], -1) * (tmp[-4] - 1) * pow(10, 6), tmp[-4])

    fig = plt.figure(figsize=(9.2, 9), num='0')
    ax = fig.add_subplot(3, 2, 1)
    ax.plot(time, sig, lw=1, color='blue')
    plot_norm(ax, 'Time (μs)', 'Amplitude (μV)', title='TRAI: %d' % i, legend=False, grid=True)
    ax = fig.add_subplot(3, 2, 2)
    Twxo, Wxo, ssq_freqs, *_ = ssq_cwt(sig, wavelet='morlet', scales='log-piecewise', fs=tmp[3], t=time)
    plt.contourf(time, ssq_freqs * 1000, pow(abs(Twxo), 0.5), cmap='cubehelix_r')
    plot_norm(ax, r'Time (μs)', r'Frequency (kHz)', y_lim=[min(ssq_freqs * 1000), 1000], legend=False)

    N, CutoffFreq, btype = 4, [550, 650], 'bandpass'
    b, a = butter(N, list(map(lambda x: 2 * x * 1e3 / tmp[3], CutoffFreq)), btype)
    sig_filter = filtfilt(b, a, sig)
    ax = fig.add_subplot(3, 2, 3)
    ax.plot(time, sig_filter, lw=1, color='gray', label='%d kHz < Frequency < %d kHz' % (CutoffFreq[0], CutoffFreq[1]))
    plot_norm(ax, 'Time (μs)', 'Amplitude (μV)', title='Bandpass', grid=True, frameon=False, legend_loc='upper right')
    ax = fig.add_subplot(3, 2, 4)
    Twxo, Wxo, ssq_freqs, *_ = ssq_cwt(sig_filter, wavelet='morlet', scales='log-piecewise', fs=tmp[3], t=time)
    plt.contourf(time, ssq_freqs * 1000, pow(abs(Twxo), 0.5), cmap='cubehelix_r')
    plot_norm(ax, r'Time (μs)', r'Frequency (kHz)', y_lim=[min(ssq_freqs * 1000), 1000], legend=False)

    N, CutoffFreq, btype = 4, [550, 650], 'bandstop'
    b, a = butter(N, list(map(lambda x: 2 * x * 1e3 / tmp[3], CutoffFreq)), btype)
    sig_filter = filtfilt(b, a, sig)
    ax = fig.add_subplot(3, 2, 5)
    ax.plot(time, sig_filter, lw=1, color='gray', label='Frequency < %d kHz or > %d kHz' % (CutoffFreq[0], CutoffFreq[1]))
    plot_norm(ax, 'Time (μs)', 'Amplitude (μV)', title='Bandstop', grid=True, frameon=False, legend_loc='upper right')
    ax = fig.add_subplot(3, 2, 6)
    Twxo, Wxo, ssq_freqs, *_ = ssq_cwt(sig_filter, wavelet='morlet', scales='log-piecewise', fs=tmp[3], t=time)
    plt.contourf(time, ssq_freqs * 1000, pow(abs(Twxo), 0.5), cmap='cubehelix_r')
    plot_norm(ax, r'Time (μs)', r'Frequency (kHz)', y_lim=[min(ssq_freqs * 1000), 1000], legend=False)

    plt.savefig('./Ni pure/subdivision_new/waveFreq_pop2_2_filter/TRAI-%d.jpg' % i, pad_inches=0)
    fig.clear()

# -------------------------------- Save waveform and ssq_cwt in batches at the same time -------------------------------
for idx, i in tqdm(enumerate(TRAI[pop1], 1)):
    tmp = data_tra[int(i - 1)]
    if i != tmp[-1]:
        print('Error: TRAI is incorrect!')
        continue
    sig = np.multiply(array.array('h', bytes(tmp[-2])), tmp[-3] * 1000)
    time = np.linspace(0, pow(tmp[-5], -1) * (tmp[-4] - 1) * pow(10, 6), tmp[-4])

    fig1 = plt.figure(figsize=(4.6, 3), num='0')
    ax = fig1.add_subplot(1, 1, 1)
    ax.plot(time, sig, lw=1, color=color_1)
    plt.axhline(abs(tmp[2]), 0, sig.shape[0], linewidth=1, color="black")
    plt.axhline(-abs(tmp[2]), 0, sig.shape[0], linewidth=1, color="black")
    plot_norm(ax, 'Time (μs)', 'Amplitude (μV)', title='TRAI:%d' % i, legend=False, grid=True)
    plt.savefig(r'C:/Users/Yuan/Desktop/TRAI-%d.jpg' % i, pad_inches=0)
    fig1.clear()

    Twxo, Wxo, ssq_freqs, *_ = ssq_cwt(sig, wavelet='morlet', scales='log-piecewise', fs=tmp[3], t=time)

    fig2 = plt.figure(figsize=(2.56, 2.56), num='1')
    # plt.imshow(np.abs(Twxo), vmin=0, vmax=3, cmap='inferno')
    plt.contourf(time, ssq_freqs * 1000, pow(abs(Twxo), 0.5), cmap='cubehelix_r')
    plt.ylim(min(ssq_freqs * 1000), 1000)
    plt.axis('off')
    plt.gca().xaxis.set_major_locator(plt.NullLocator())
    plt.gca().yaxis.set_major_locator(plt.NullLocator())
    plt.subplots_adjust(top=1, bottom=0, right=1, left=0, hspace=0, wspace=0)
    plt.margins(0, 0)
    plt.savefig(os.path.join(r'C:/Users/Yuan/Desktop', '%i.jpg' % i), pad_inches=0)
    fig2.clear()

# ---------------------------------------- Save waveform and ssq_cwt in batches ----------------------------------------
for idx, i in tqdm(enumerate(TRAI[pop1], 1)):
    tmp = data_tra[int(i - 1)]
    if i != tmp[-1]:
        print('Error: TRAI is incorrect!')
        continue
    sig = np.multiply(array.array('h', bytes(tmp[-2])), tmp[-3] * 1000)
    time = np.linspace(0, pow(tmp[-5], -1) * (tmp[-4] - 1) * pow(10, 6), tmp[-4])

    fig = plt.figure(figsize=(9.2, 3), num='0')
    ax = fig.add_subplot(1, 2, 1)
    ax.plot(time, sig, lw=1, color=color_2)
    plt.axhline(abs(tmp[2]), 0, sig.shape[0], linewidth=1, color="black")
    plt.axhline(-abs(tmp[2]), 0, sig.shape[0], linewidth=1, color="black")
    plot_norm(ax, 'Time (μs)', 'Amplitude (μV)', title='TRAI:%d' % i, legend=False, grid=True)
    ax = fig.add_subplot(1, 2, 2)
    Twxo, Wxo, ssq_freqs, *_ = ssq_cwt(sig, wavelet='morlet', scales='log-piecewise', fs=tmp[3], t=time)
    plt.contourf(time, ssq_freqs * 1000, pow(abs(Twxo), 0.5), cmap='cubehelix_r')
    plot_norm(ax, r'Time (μs)', r'Frequency (kHz)', y_lim=[min(ssq_freqs * 1000), 1000], legend=False)
    plt.savefig('./Ni electrolysis/subdivision_Entanglement/waveFreq_pop1/TRAI-%d.jpg' % i, pad_inches=0)
    fig.clear()

# --------------------------------------- Save waveform and frequency in batches ---------------------------------------
for idx, i in tqdm(enumerate(TRAI[pop1], 1)):
    tmp = data_tra[int(i - 1)]
    if i != tmp[-1]:
        print('Error: TRAI is incorrect!')
        continue
    sig = np.multiply(array.array('h', bytes(tmp[-2])), tmp[-3] * 1000)
    time = np.linspace(0, pow(tmp[-5], -1) * (tmp[-4] - 1) * pow(10, 6), tmp[-4])
    half_frq, normalization_half, _ = frequency.cal_frequency(i - 1, valid=False)

    fig = plt.figure(figsize=(9.2, 3), num='0')
    ax = fig.add_subplot(1, 2, 1)
    ax.plot(time, sig, lw=1, color=color_2)
    plt.axhline(abs(tmp[2]), 0, sig.shape[0], linewidth=1, color="black")
    plt.axhline(-abs(tmp[2]), 0, sig.shape[0], linewidth=1, color="black")
    plot_norm(ax, 'Time (μs)', 'Amplitude (μV)', title='TRAI:%d' % i, legend=False, grid=True)
    ax = fig.add_subplot(1, 2, 2)
    ax.plot(half_frq / 1000, normalization_half, lw=1)
    plot_norm(ax, 'Freq (kHz)', '|Y(freq)|', x_lim=[0, pow(10, 3)], legend=False)
    plt.savefig('./Ni electrolysis/subdivision_new/waveFreq_pop2_1_old/TRAI-%d.jpg' % i, pad_inches=0)
    fig.clear()

# ---------------------------------------------- Save waveforms in batches ---------------------------------------------
for idx, i in tqdm(enumerate(TRAI[cls_KKM[0]], 1)):
    tmp = data_tra[int(i - 1)]
    if i != tmp[-1]:
        print('Error: TRAI is incorrect!')
        continue
    sig = np.multiply(array.array('h', bytes(tmp[-2])), tmp[-3] * 1000)
    time = np.linspace(0, pow(tmp[-5], -1) * (tmp[-4] - 1) * pow(10, 6), tmp[-4])

    fig = plt.figure(figsize=(6, 4.1), num='0')
    fig.text(0.95, 0.17, status, fontdict={'family': 'Arial', 'fontweight': 'bold', 'fontsize': 12},
             horizontalalignment="right")
    ax = fig.add_subplot(1, 1, 1)
    ax.plot(time, sig, lw=1, color=color_1)
    plt.axhline(abs(tmp[2]), 0, sig.shape[0], linewidth=1, color="black")
    plt.axhline(-abs(tmp[2]), 0, sig.shape[0], linewidth=1, color="black")
    plot_norm(ax, 'Time (μs)', 'Amplitude (μV)', title='TRAI:%d' % i, legend=False, grid=True)
    plt.savefig('./pop1_wave/TRAI-%d.jpg' % i, pad_inches=0)
    fig.clear()

# ---------------------------------------------- Save ssq_cwt in batches -----------------------------------------------
for trai in tqdm(TRAI[cls_KKM[1]]):
    i = data_tra[int(trai - 1)]
    sig = np.multiply(array.array('h', bytes(i[-2])), i[-3] * 1000)
    time = np.linspace(0, pow(i[-5], -1) * (i[-4] - 1) * pow(10, 6), i[-4])

    Twxo, Wxo, ssq_freqs, *_ = ssq_cwt(sig, wavelet='morlet', scales='log-piecewise', fs=i[3], t=time)

    fig = plt.figure(figsize=(2.56, 2.56), num='1')
    # plt.imshow(np.abs(Twxo), vmin=0, vmax=3, cmap='inferno')
    plt.contourf(time, ssq_freqs * 1000, pow(abs(Twxo), 0.5), cmap='cubehelix_r')
    plt.ylim(min(ssq_freqs * 1000), 1000)
    plt.axis('off')
    plt.gca().xaxis.set_major_locator(plt.NullLocator())
    plt.gca().yaxis.set_major_locator(plt.NullLocator())
    plt.subplots_adjust(top=1, bottom=0, right=1, left=0, hspace=0, wspace=0)
    plt.margins(0, 0)
    plt.savefig(os.path.join('./train dataset_wsst', '%i.jpg' % trai), pad_inches=0)
    fig.clear()

# -------------------------------------------- Save cwt figures in batches ---------------------------------------------
for idx, i in tqdm(enumerate(TRAI, 1)):
    tmp = data_tra[int(i - 1)]
    if i != tmp[-1]:
        print('Error: TRAI is incorrect!')
        continue
    sig = np.multiply(array.array('h', bytes(tmp[-2])), tmp[-3] * 1000)
    time = np.linspace(0, pow(tmp[-5], -1) * (tmp[-4] - 1) * pow(10, 6), tmp[-4])

    scales = pywt.central_frequency('morl') * 1e3 / np.arange(1, 1e3, 1e0)
    [cwtmatr_new, frequencies_new] = pywt.cwt(sig, scales, 'morl', 1.0 / tmp[3])

    fig = plt.figure(figsize=(2.56, 2.56), num='1')
    plt.contourf(time, frequencies_new, abs(cwtmatr_new))
    plt.ylim(2e4, 1e6)
    plt.axis('off')
    plt.gca().xaxis.set_major_locator(plt.NullLocator())
    plt.gca().yaxis.set_major_locator(plt.NullLocator())
    plt.subplots_adjust(top=1, bottom=0, right=1, left=0, hspace=0, wspace=0)
    plt.margins(0, 0)
    plt.savefig('./cwt_data_chan2/%d.jpg' % idx, pad_inches=0)
    fig.clear()

# -------------------------------------------- Save stft figures in batches --------------------------------------------
for idx, i in tqdm(enumerate(TRAI_2)):
    tmp = data_tra[int(i - 1)]
    if i != tmp[-1]:
        continue
    sig = np.multiply(array.array('h', bytes(tmp[-2])), tmp[-3] * 1000)
    D = librosa.stft(sig, hop_length=128)
    S_db = librosa.amplitude_to_db(np.abs(D), ref=np.max)
    fig, ax = plt.subplots(figsize=(2.56, 2.56), num='2')
    img = librosa.display.specshow(S_db, sr=tmp[3], hop_length=128, x_axis='time', y_axis='linear', ax=ax)
    ax.set(title='Now with labeled axes!')
    ax.set_ylim(0, 1000000)
    plt.axis('off')
    plt.gca().xaxis.set_major_locator(plt.NullLocator())
    plt.gca().yaxis.set_major_locator(plt.NullLocator())
    plt.subplots_adjust(top=1, bottom=0, right=1, left=0, hspace=0, wspace=0)
    plt.margins(0, 0)
    plt.savefig('./data/%d.jpg' % (idx + 1), pad_inches=0)

# # ------------------------------------------ Save waveforms data in batches ------------------------------------------
for idx, i in tqdm(enumerate(TRAI, 1)):
    tmp = data_tra[int(i - 1)]
    if i != tmp[-1]:
        print('Error: TRAI is incorrect!')
        continue
    sig = np.multiply(array.array('h', bytes(tmp[-2])), tmp[-3] * 1000)
    time = np.linspace(0, pow(tmp[-5], -1) * (tmp[-4] - 1) * pow(10, 6), tmp[-4])

    with open('./wave_chan3/%d.txt' % (idx + 256), 'w') as f:
        f.write('Time (μs), Amplitude (μV)\n')
        for s, t in zip(sig, time):
            f.write('%f, %f\n' % (t, s))
